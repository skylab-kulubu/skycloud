#!/usr/bin/env python3

import argparse
import os
import subprocess
import re
import glob
import sys

parser = argparse.ArgumentParser(description="Homeserver setup util")
parser.add_argument("--install-docker", action="store_true",
                    help="Install docker engine.")
parser.add_argument("--hard-installation", action="store_true",
                    help="Remove docker engine before installation. Only RHEL&Debian based distros!")
parser.add_argument("-c", "--generate-certificates", action="store_true",
                    help="Set this value if you want SSL certificates to be generated, set it to 'False' or leave it blank if you want to use test certificates.")
parser.add_argument("--pass-certificate-arguments", action="store_true")
parser.add_argument("--default-env-files", action="store_true",
                    help="Set to 'True' if you want .env files to be created using standard instance files.")
parser.add_argument("-d", "--domain", type=str,
                    help="Set Nginx nameserver", required=False)
parser.add_argument("--upload-size", type=str,
                    help="File upload size limit, 0 is unlimited. Example: 16G, 100M.", required=False)
parser.add_argument("--nextcloud-subdomain", type=str, required=False,
                    help="nextcloud.example.com --> replaces nextcloud to any subdomain string")
parser.add_argument("-p", "--pull-images", action="store_true",
                    help="Pull docker images after configuration.")
parser.add_argument("-r", "--run-server",
                    action="store_true", help="Start server")
parser.add_argument("--no-gitea", action="store_true",
                    help="Disables Gitea server installation and pull phases.")
args = parser.parse_args()


def check_pkg_manager():
    managers = ["apt", "dnf", "yum", "zyper", "pacman"]
    for manager in managers:
        try:
            output = subprocess.check_output(
                ["command", "-v", manager], text=True)
        except:
            print(manager+"packate manager is not competible")
    return output


def remove_docker_engine():
    pm = check_pkg_manager()
    if "apt" in pm:
        command = "for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done"
        subprocess.run(command, shell=True)
    if pm in ["dnf", "yum"]:
        command = "sudo dnf remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine"
        subprocess.run(command, shell=True)


def install_docker_engine():
    installation_script_text = requests.get("https://get.docker.com").text
    with open("/tmp/docker.sh", "w") as file:
        file.write(installation_script_text)
    subprocess.run("sudo bash /tmp/docker.sh", shell=True)


def pull_images(no_gitea: bool = False):
    cwd = os.getcwd()
    subprocess.run("docker compose pull", cwd=cwd, shell=True)
    if not no_gitea:
        subprocess.run("docker compose pull", cwd=cwd+"/gitea", shell=True)


def run_server(no_gitea: bool = False):
    cwd = os.getcwd()
    subprocess.run("docker compose up -d", cwd=cwd, shell=True)
    if not no_gitea:
        subprocess.run("docker compose up -d", cwd=cwd+"/gitea", shell=True)


def generate_certificates(pass_certificate_arguments: bool):
    cwd = os.getcwd()

    if not os.path.exists(cwd+"/certs"):
        os.makedirs(cwd+"certs")

    command = "bash ../gencert"

    if pass_certificate_arguments:
        command = "yes NA |" + command

    subprocess.run(command, shell=True, cwd=f"{cwd}/certs")


def default_env_files():
    cwd = os.getcwd()
    files = glob.glob(os.path.join(cwd, '**', 'example.env'), recursive=True)

    for file in files:
        new_file = os.path.join(os.path.dirname(file), '.env')
        os.rename(file, new_file)


def set_domain(domain: str, nextcloud_subdomain: str = "nextcloud"):
    cwd = os.getcwd()
    if len(domain.split(".")) == 3:
        domain = domain.split(".")[1]
    elif len(domain.split(".")) == 2:
        domain = domain.split(".")[0]
    with open(f"{cwd}/nginx/nginx.conf", "r") as file:
        lines = file.readlines()

    with open(f"{cwd}/nginx/nginx.conf", "w") as file:
        for line in lines:
            if line.strip().startswith("server_name"):
                rex = re.compile(
                    r"([\Sa-zA-Z1-9]+)\.([a-zA-Z1-9]+)\.([a-zA-Z1-9]+)")
                domains = rex.findall(line)
                for i in domains:
                    line = line.replace(f".{i[1]}.", f".{domain}.")
                    line = line.replace("nextcloud.", nextcloud_subdomain+".")
                # line = re.sub(r'server_name\s+\S+;', f'server_name {domain};', line)
            file.write(line)

    with open(f"{cwd}/nextcloud/.env", "r") as file:
        lines = file.readlines()

    with open(f"{cwd}/nextcloud/.env", "w") as file:
        for line in lines:
            if line.strip().startswith("NEXTCLOUD_TRUSTED_DOMAINS"):

                line = re.sub(r'NEXTCLOUD_TRUSTED_DOMAINS=.*',
                              f'NEXTCLOUD_TRUSTED_DOMAINS={nextcloud_subdomain}.{domain}')
            file.write(line)


def set_upload_size(size: str):
    cwd = os.getcwd()
    files = ["/nextcloud/web/nginx.conf", "/nginx/uploadsize.conf"]
    for config_file in files:
        with open(f"{cwd}{config_file}", "r") as file:
            lines = file.readlines()

        with open(f"{cwd}{config_file}", "w") as file:
            for line in lines:
                if line.strip().startswith("client_max_body_size"):
                    line = re.sub(r'client_max_body_size\s+\S+;',
                                  f'client_max_body_size {size};', line)
                file.write(line)


if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(0)

if args.generate_certificates:
    generate_certificates(
        pass_certificate_arguments=args.pass_certificate_arguments)

if args.default_env_files:
    default_env_files()

if args.domain is not None:
    if args.nextcloud_subdomain is not None:
        set_domain(domain=args.domain,
                   nextcloud_subdomain=args.nextcloud_subdomain)
    else:
        set_domain(domain=args.domain)

if args.upload_size is not None:
    set_upload_size(size=args.upload_size)

if args.install_docker:
    if args.hard_installation:
        remove_docker_engine()
    install_docker_engine()

if args.pull_images and (not args.run_server):
    pull_images(args.no_gitea)

if args.run_server:
    run_server()
